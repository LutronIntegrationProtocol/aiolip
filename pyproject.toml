[tool.poetry]
name = "aiolip"
version = "0.1.0"
description = "Async Lutron Integration Protocol"
authors = ["J. Nick Koston <nick@koston.org>"]
maintainers = ["J. Nick Koston <nick@koston.org>"]
license = "apache-2.0"
readme = "README.rst"
homepage = "https://github.com/LutronIntegrationProtocol/aiolip"
repository = "https://github.com/LutronIntegrationProtocol/aiolip"
documentation = "https://github.com/LutronIntegrationProtocol/aiolip"
keywords = ["aiolip"]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  'Intended Audience :: Developers',
  'License :: OSI Approved :: Apache Software License',
  'Natural Language :: English',
  'Programming Language :: Python :: 3.12',
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
]
packages = [
    { include = "aiolip" },
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
codespell = "2.4.1"
covdefaults = "2.3.0"
coverage = {version = "7.9.2", extras = ["toml"]}
mypy = "1.16.1"
pre-commit = "4.2.0"
pre-commit-hooks = "5.0.0"
pylint = "3.3.7"
pytest = "8.4.1"
pytest-asyncio = "1.0.0"
pytest-cov = "6.2.1"
ruff = "0.12.2"
safety = "3.5.2"
yamllint = "1.37.1"
syrupy = "4.9.1"
aioresponses = "0.7.8"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/LutronIntegrationProtocol/aiolip/issues"
Changelog = "https://github.com/LutronIntegrationProtocol/aiolip/releases"

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["aiolip"]

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.12"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
#check_untyped_defs = true
#disallow_any_generics = true
#disallow_incomplete_defs = true
#disallow_subclassing_any = true
#disallow_untyped_calls = false
#disallow_untyped_decorators = true
#disallow_untyped_defs = false
#no_implicit_optional = true
#strict_optional = true
#warn_incomplete_stub = true
#warn_no_return = true
#warn_redundant_casts = true
#warn_return_any = true
#warn_unused_configs = true
#warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = [
  "tests",
]

[tool.pylint.BASIC]
good-names = [
  "_",
  "ex",
  "fp",
  "i",
  "id",
  "j",
  "k",
  "on",
  "Run",
  "T",
]

[tool.pylint.DESIGN]
max-attributes = 8

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
  "too-many-instance-attributes",
  "wrong-import-order",
  "too-many-arguments",
  "too-many-positional-arguments",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "redefined-builtin",
  "wrong-import-position",
  "invalid-name",
  "too-many-positional-arguments",
  "too-many-positional-arguments",
  "too-many-positional-arguments",
  "too-many-positional-arguments",
  "too-many-positional-arguments",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff.lint]
ignore = [
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "COM812", # Conflicts with other rules
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "ISC001", # Conflicts with other rules
  "PLR2004", # Just annoying, not really useful
  "D104",
  "ANN204",
  "ANN201",
  "ANN001",
  "ANN202",
  "TRY300",
  "PERF203",
  "RUF006",
  "D100",
  "D101",
  "D107",
  "E501",
  "S105",
  "ERA001",
  "EXE001",
  "PTH100",
  "S101",
  "D102",
  "A001",
  "ANN002",
]
select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["aiolip"]
force-sort-within-sections = true
split-on-trailing-comma = false
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 25

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
